# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fZESTgsI0DiDH9KTgYL-BCEIDSK8Zmeg
"""

!pip install -q streamlit

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_percentage_error, mean_squared_error, r2_score

st.title("USD/MYR Exchange Rate Predictor")

# --- File uploader ---
uploaded_file = st.file_uploader("Upload your CSV file with input features", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)

    # Define selected columns
    selected_columns = [
        'MSIA_IR_lag1', 'MSIA_UR_lag1', 'FBMKLCI_Index_lag1', 'VIX_lag1', 'GVZ_lag1',
        'USA_IR_lag1', 'USA_IPI_lag1', 'USA_UR_lag1', 'USA_M1_lag1', 'USA_CPI.1_lag1',
        'S&P_Index_lag1', 'MSIA_NetTrade_lag1'
    ]

    try:
        df7 = df[selected_columns].copy()
        df7['log_USD_MYR'] = df['log_USD_MYR']

        # Drop NA
        df7.dropna(inplace=True)

        # Split features and target
        X = df7[selected_columns]
        y = df7['log_USD_MYR']

        # Train-test split
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )

        def evaluate_model(name, y_true, y_pred, n_features):
            mape = mean_absolute_percentage_error(y_true, y_pred)
            rmse = np.sqrt(mean_squared_error(y_true, y_pred))
            r2 = r2_score(y_true, y_pred)
            n = len(y_true)
            adj_r2 = 1 - (1 - r2) * (n - 1) / (n - n_features - 1)

            st.subheader(f"{name} Evaluation")
            st.write(f"**RMSE**       : {rmse:.4f}")
            st.write(f"**MAPE**       : {mape:.4f}")
            st.write(f"**R²**         : {r2:.4f}")
            st.write(f"**Adjusted R²**: {adj_r2:.4f}")

        # --- Model Selection ---
        model_choice = st.selectbox("Choose a model", ["Random Forest", "SVM"])

        if st.button("Train and Evaluate"):
            if model_choice == "Random Forest":
                model = RandomForestRegressor(n_estimators=149, max_depth=16, max_features='log2', min_samples_split=5, min_samples_leaf=1, random_state=42)
            else:
                model = SVR(kernel='rbf', C=11.789142699330444, gamma='scale', epsilon=0.025714592843367128)

            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)

            evaluate_model(model_choice, y_test, y_pred, X.shape[1])

    except KeyError as e:
        st.error(f"Missing expected column in CSV: {e}")